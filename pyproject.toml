[build-system]
requires = ["setuptools ~= 58.0", "cython ~= 3.0.0"]

[project]
name = "ROBO-ESOCIAL"
requires-python = "==3.11"
dynamic = ["version"]

[tool.ruff]
cache-dir = ".cache/ruff"
respect-gitignore = true
fix = true
indent-width = 4
line-length = 88
output-format = "github"
required-version = ">=0.6.8"
show-fixes = true
src = ["src"]
unsafe-fixes = false

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 64
indent-style = "space"
line-ending = "lf"
quote-style = "single"
skip-magic-trailing-comma = false

[tool.ruff.lint]
task-tags = ["TODO", "FIXME", "HACK", "NOTE"]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true
from-first = false
force-to-top = ["src"]
known-first-party = ["src"]
length-sort-straight = true
lines-after-imports = 2
lines-between-types = 1
relative-imports-order = "closest-to-furthest"
required-imports = ["from __future__ import annotations"]
section-order = ["future", "local-folder", "testing", "first-party", "standard-library", "third-party"]
split-on-trailing-comma = false

[tool.ruff.lint.isort.sections]
testing = ["pytest"]
# maybe? webdriver

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 88
max-line-length = 120

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.docformatter]
# black opts modificadas
pre-summary-space = false
wrap-descriptions = 100
wrap-summaries = 100
# outras
in-place = true
recursive = false
style = "sphinx"

[tool.autoflake]
jobs = "3"
in-place = true
remove-all-unused-imports = true
ignore-init-module-imports = true
remove-unused-variables = true
ignore-pass-statements = false
ignore-pass-after-docstring = true

[tool.bandit]
exclude_dirs = [
  "installer/build",
  ".venv",
  ".venv-dist",
  "build",
  "build_cython",
  "dist"
]
targets = [
  "src",
  "installer"
]

# Aviso para futuras modificações:
#   No pylint seções de configuração são puramente uma ferramenta
#   de organização de opções. Por debaixo dos panos ele transforma
#   todas em argumentos de linha de comando. Portanto, colocar
#   "enable=all" em uma seção que vem depois de "disable=invalid-name"
#   vai anular o "disable" completamente. Nenhuma opção está restringida
#   a nenhuma seção.
[tool.pylint.main]
max-line-length = 100
load-plugins = [
  "pylint.extensions.empty_comment",
  "pylint.extensions.eq_without_hash",
  "pylint.extensions.private_import",
  "pylint.extensions.docparams"
]

[tool.pylint."messages control"]
disable = [
  "line-too-long",
  "invalid-name",
  "consider-using-enumerate",
  "not-an-iterable",
  "wrong-import-order",
  "wrong-import-position",
  "pointless-string-statement", # para docstrings de variaveis
  "consider-using-f-string",
  "disallowed-name"
]

[tool.pyright]
pythonVersion = "3.11"
pythonPlatform = "Windows"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
exclude = [
  "**/.venv*/",
  "**/build*/",
  "**/dist/",
]
include = [
  "src/",
  "installer/"
]
# Bibliotecas importantes estão apenas parcialmente ou totalmente sem tipos.
# Alguns desses avisos são importantes, mas em bao parte da codebase, inevitáveis, infelizmente.
# Mensagens específicas:
reportMissingTypeStubs = "none"
reportWildcardImportFromLibrary = "none"
reportIncompleteStub = "none"
reportUnnecessaryIsInstance = "none"
reportUnnecessaryCast = "none"
reportUnnecessaryContains = "none"
reportUnnecessaryComparison = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportGeneralTypeIssues = "none"
reportOptionalMemberAccess = "none"
